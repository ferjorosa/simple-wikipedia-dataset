def parallel_format_texts(texts, max_workers=None):
    """
    Formats multiple texts in parallel using the format_text_to_markdown function.

    Args:
        texts (list of str): List of raw texts to be formatted.
        max_workers (int, optional): Maximum number of threads to use. If None, uses the default (maximum possible).

    Returns:
        list of str: List of formatted markdown texts.
    """
    with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
        futures = [executor.submit(format_text_to_markdown, text) for text in texts]
        formatted_texts = [
            future.result() for future in concurrent.futures.as_completed(futures)
        ]
    return formatted_texts


-------

Una vez todo funcione, tengo que hacer una funcione que vaya almacenando los textos en una base de datos SQLite,
ya que esta probablemente permite que haga inserciones paralelas. La otra opciones guardarlo como archivos
individuales en disco.

Lo primero es checkear que dicho articulo no este ya en la DB (vamos en orden). En caso de no
estar, procesamos el articulo y lo guardamos en la DB,

Columnas:
* article_id
* article_title
* article_text_raw
* article_text_markdown
* model (HuggingFace)

Podemos hacer una primera prueba con 1 articulo en forma secuencial,
luego con 10 articulos de forma paralela,
luego con 100

Una vez todo va bien, ponemos la maquina a funcionar con X threads


-------------------

- AÃ±adir un Project_paths file / enum para no tener que hacer "../" en los notebooks
- Documentacion (obviamente)
